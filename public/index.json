[
  {
    "content": "Setup AWS CLI Follow below steps for installation of AWS CLI on Windows Operating System\nVerify Python installation: AWS CLI requires Python to be installed on your Windows laptop. Open the Command Prompt by searching for “Command Prompt” in the Windows Start menu.\nThen, type the following command and press Enter to check if Python is installed:\npython --version If Python is not installed, download and install the latest version of Python from the official website (https://www.python.org/downloads/). Make sure to select the option to add Python to the system PATH during the installation process.\nOpen the Command Prompt: Open the Command Prompt on your Windows laptop. You can do this by searching for “Command Prompt” in the Windows Start menu.\nInstall AWS CLI using pip: In the Command Prompt, run the following command to install AWS CLI using the Python package manager, pip:\npip install awscli This command will download and install the AWS CLI and its dependencies.\nVerify AWS CLI installation: After the installation is complete, you can verify if AWS CLI is installed correctly by running the following command in the Command Prompt:\naws --version If the installation was successful, it will display the version of AWS CLI installed on your system.\nConfigure AWS CLI: To use AWS CLI, you need to configure it with your AWS credentials. Run the following command in the Command Prompt:\naws configure This command will prompt you to enter your AWS Access Key ID, AWS Secret Access Key, default region, and default output format. You can obtain the Access Key ID and Secret Access Key from the AWS Management Console. The default region is the AWS region you want to interact with (e.g., “us-west-2” for US West (Oregon)). The default output format can be set to “json” or “text”.\nRef this link to get IAM User Access Key and Secret Access Key (http://localhost:56450/aws/iam/iam_keys/)\nOnce you have entered the required information, it will be stored in a configuration file on your system.\nThat’s it! You have successfully installed and configured AWS CLI on your Windows laptop.\nValidate AWS CLI installation using below command\naws s3 ls You can now use AWS CLI commands to interact with various AWS services from the Command Promp ",
    "description": "",
    "tags": null,
    "title": "Configure AWS CLI - Windows",
    "uri": "/terraform/cli_setup_windows/index.html"
  },
  {
    "content": "Setup AWS CLI To set up the AWS Command Line Interface (CLI) on a MacBook, you can follow these steps:\nInstall Python: AWS CLI requires Python to be installed on your MacBook. By default, macOS comes with a pre-installed version of Python. Open the Terminal application (you can find it in the “Utilities” folder within “Applications”) and run the following command to check if Python is installed: python --version If Python is not installed, you can download and install it from the official Python website (https://www.python.org/downloads/). It is recommended to install the latest stable version.\nInstall AWS CLI using pip: In the Terminal, run the following command to install AWS CLI using the Python package manager, pip: pip install awscli --upgrade --user This command will download and install the AWS CLI and its dependencies. The --upgrade flag ensures that you get the latest version of AWS CLI, and the --user flag installs it in the user’s directory.\nVerify AWS CLI installation: After the installation is complete, you can verify if AWS CLI is installed correctly by running the following command in the Terminal: aws --version If the installation was successful, it will display the version of AWS CLI installed on your system.\nConfigure AWS CLI: To use AWS CLI, you need to configure it with your AWS credentials. Run the following command in the Terminal: aws configure This command will prompt you to enter your AWS Access Key ID, AWS Secret Access Key, default region, and default output format. You can obtain the Access Key ID and Secret Access Key from the AWS Management Console. The default region is the AWS region you want to interact with (e.g., “us-west-2” for US West (Oregon)). The default output format can be set to “json” or “text”.\nOnce you have entered the required information, it will be stored in a configuration file on your system.\nValidate AWS CLI installation using below command aws s3 ls That’s it! You have successfully set up AWS CLI on your MacBook. You can now use AWS CLI commands to interact with various AWS services from the Terminal.\n",
    "description": "",
    "tags": null,
    "title": "Configure AWS CLI - Mac OS",
    "uri": "/terraform/cli_setup_macos/index.html"
  },
  {
    "content": "To install Terraform on a Windows system, you can follow these steps:\nDownload the Terraform binary:\nOpen a web browser and go to the Terraform website at https://www.terraform.io/downloads.html. Scroll down to the “Terraform Core” section and locate the Windows version. Click on the appropriate 64-bit or 32-bit download link depending on your system architecture. This will download a ZIP file containing the Terraform binary. Extract the Terraform binary:\nLocate the downloaded ZIP file, right-click on it, and select “Extract All” from the context menu. Choose the destination folder where you want to extract the contents of the ZIP file. Set up the PATH environment variable:\nOpen the Start menu and search for “Environment Variables”. Click on “Edit the system environment variables” to open the System Properties window. In the System Properties window, click on the “Environment Variables” button. In the “System variables” section, scroll down and find the “Path” variable. Select it and click on the “Edit” button. In the “Edit Environment Variable” window, click on the “New” button and enter the path to the directory where you extracted the Terraform binary. For example, if you extracted it to “C:\\terraform”, enter that path. Click “OK” to save the changes. Verify the installation:\nOpen a new Command Prompt window by searching for “Command Prompt” in the Start menu. Type terraform --version and press Enter. If Terraform is correctly installed and the PATH environment variable is set up correctly, it will display the version of Terraform installed on your system. That’s it! You have successfully installed Terraform on your Windows system. You can now use Terraform commands to manage your infrastructure as code. Remember to consult the Terraform documentation for further guidance on using Terraform and setting up your configurations.\n",
    "description": "",
    "tags": null,
    "title": "Configure Terraform - Windows",
    "uri": "/terraform/terraform_setup_windows/index.html"
  },
  {
    "content": "To install Terraform on macOS using Homebrew, you can follow these steps:\nOpen the Terminal application. You can find it in the “Utilities” folder within the “Applications” folder.\nInstall Homebrew (if not already installed): In the Terminal, paste the following command and press Enter:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" This command will install Homebrew, a package manager for macOS.\nInstall Terraform: In the Terminal, run the following command to install Terraform using Homebrew: brew install terraform This command will download and install the latest version of Terraform from the Homebrew repository.\nVerify the installation: After the installation is complete, you can verify if Terraform is installed correctly by running the following command in the Terminal: terraform --version If the installation was successful, it will display the version of Terraform installed on your system.\nThat’s it! You have successfully installed Terraform on your macOS system using Homebrew. You can now use Terraform commands to manage your infrastructure as code. Make sure to consult the Terraform documentation for further guidance on using Terraform and setting up your configurations.\n",
    "description": "",
    "tags": null,
    "title": "Configure Terraform - Mac OS",
    "uri": "/terraform/terraform_setup_macos/index.html"
  },
  {
    "content": "Terrafom Features This section covers: - Terraform\n",
    "description": "",
    "tags": null,
    "title": "Infra As Code Terraform",
    "uri": "/terraform/index.html"
  },
  {
    "content": "Terrafom Features This section covers: - AWS\n",
    "description": "",
    "tags": null,
    "title": "Cloud Computing AWS",
    "uri": "/aws/index.html"
  },
  {
    "content": "To get your AWS Access Key ID and AWS Secret Access Key, you can follow these steps:\nSign in to the AWS Management Console: Open your web browser and go to the AWS Management Console at https://console.aws.amazon.com/. Sign in using your AWS account credentials.\nOpen the IAM service: Once you are logged in to the AWS Management Console, search for “IAM” (Identity and Access Management) in the services search bar, and click on the IAM service to open it.\nAccess the Users section: In the IAM console, locate the “Users” option in the left navigation pane and click on it. This will show you a list of IAM users in your AWS account.\nCreate a new IAM user (optional): If you don’t have an existing IAM user with the necessary permissions, you can create a new IAM user by clicking on the “Add user” button. Follow the instructions to provide a username and set the access type.\nGenerate access keys: In the list of IAM users, locate the user for which you want to generate the access keys and click on the username to access the user’s details.\nAccess the Security Credentials tab: Within the user’s details, navigate to the “Security credentials” tab, which provides access to the user’s security-related settings.\nCreate access keys: Under the “Access keys” section, click on the “Create access key” button. This will generate a new access key pair for the selected IAM user.\nCopy the Access Key ID and Secret Access Key: Once the access keys are generated, you will see the Access Key ID and Secret Access Key on the screen. Copy these values or download the CSV file that contains the access key details.\nImportant: The Secret Access Key is only displayed once when the keys are first generated. Make sure to securely store the Secret Access Key in a safe location. If you lose it, you will need to generate a new access key pair.\nThat’s it! You now have your AWS Access Key ID and AWS Secret Access Key. These credentials are essential for configuring AWS CLI or any other AWS service that requires access to your AWS account.\n",
    "description": "",
    "tags": null,
    "title": "Get Access Key and Secret Access Key",
    "uri": "/aws/iam/iam_keys/index.html"
  },
  {
    "content": "Terrafom Features This section covers: - IAM\n",
    "description": "",
    "tags": null,
    "title": "IAM - Administration",
    "uri": "/aws/iam/index.html"
  },
  {
    "content": "CodvaTech Labs DevOps BootCamp This documentation is designed for CodvaTech Labs DevOps BootCamp Course\nDevOps Tech Stack DevOps BootCamp will be covering below Tech Stack\nNetworking Core Concepets Linux Training AWS Core Services Basics of GIT and Github Infra As Code - Terraform Configuration Management - Ansible Jenkins Setup CI/CD Pipeline for Legacy tech stack using Jenkins , Ansible , Maven Basics of Docker AWS ECS Solution Setup CI/CD Piepline for Container based tech stack Coming Soon We are working on adding below tech stack in our DevOps course\nBasics of Azure Basics of Kubernates Contributors This documentation was made possible due to many contributions from the CodvaTech Labs\nA big shout out to CodvaTech Labs Team\nContributors \u0026 Reviewers\nNilesh G Mohan G ",
    "description": "",
    "tags": null,
    "title": "CodvaTechLabs DevOps BootCamp",
    "uri": "/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
